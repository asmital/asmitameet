{"version":3,"sources":["Shared.js","LocalTracks.js","RemoteTrack.js","LocalSpeaker.js","MessageItem.js","MyChatBox.js","App.js","index.js"],"names":["componentGetCompareProps","path","current","previous","defaultValue","transfrom","cur","_","get","pre","isFunction","Current","Previous","HasChanged","LocalTracks","props","onTrackStoppedEvent","event","console","log","onTrackAudioOutputChangedEvent","deviceId","updateLocalTrack","action","clearTrack","find","trackList","getType","micRef","detach","removeEventListener","window","JitsiMeetJS","events","track","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","dispose","videoRef","setTrack","t","attach","addEventListener","mute","allowVidCall","setState","joinVidCall","setVidCallFlagFx","disableVidCall","onCameraChange","selectedVideoDeviceId","target","value","onMicrophoneChange","selectedMicDeviceId","state","loaded","React","createRef","setVidCallFlag","this","deviceList","defaultMicId","defaultVideoId","activeRoomId","createLocalTracks","devices","then","tracks","deviceIds","map","nd","id","indexOf","push","asmitaMeet","activeRoom","videoTrack","micTrack","addTrack","prevProps","prevState","className","onClick","autoPlay","ref","Component","RemoteTrack","updateTrack","type","selectedVideoId","selectedMicId","name","participantName","trackIds","selectedSpeakerDeviceId","filter","remoteTracks","rt","newState","setAudioOutput","ct","join","pt","participantId","first","tid","oldVideoTrack","oldMicTrack","error","message","MessageItem","toCurrentDate","timestamp","currTime","Date","dd","getDate","mm","getMonth","hours","getHours","mins","getMinutes","now","sender","MyChatBox","onSend","currentMessage","tempText","tempName","tempTimestamp","tempString","JSON","stringify","sendTextMessage","displaylistofMessages","ret","n","listofMessages","length","m","key","i","messages","participantNames","participant","placeholder","onChange","class","App","onMessageRecvdOfApp","msg","ns","tempjason","parse","flag","onSpeakerChanged","newSpeaker","onServerChanged","serverURL","onRoomChanged","roomId","onRoomTrackAdded","isLocal","newTrackId","getId","trackInfo","getParticipantId","remoteTrackIds","onRoomTrackRemoved","trackId","reject","onConnectionSuccess","activeConnection","initJitsiConference","openBridgeChannel","conference","TRACK_ADDED","TRACK_REMOVED","MESSAGE_RECEIVED","USER_JOINED","onUserJoined","USER_LEFT","onUserLeft","setDisplayName","setLocalParticipantProperty","setSubject","tempMyUserId","myUserId","tempList","getParticipants","myName","participantList","status","lastError","uuidv4","user","tempdisplayName","getParticipantById","_displayName","tempID","p","onConnectionFailed","a","b","c","d","onConnectionDisconnect","connection","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_DISCONNECTED","onConnect","JitsiConnection","hosts","domain","muc","serviceUrl","clientNode","connect","onDisconnect","leave","disconnect","strSanitize","passedStr","replacedString","replace","toLowerCase","renderRemoteTracks","trackGroups","participantIds","keys","tempParticipantName","defaultSpeakerId","strSanitizeFx","myfx","mediaDevices","enumerateDevices","newDeviceList","device","label","kind","micId","videoId","speakerId","remoteTrackGroups","groupBy","onSubmit","required","disable","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f29726b.chunk.js","sourcesContent":["import _ from 'lodash'\n\nexport const componentGetCompareProps = (path, current, previous, defaultValue, transfrom) => {\n    let cur = _.get(current, path, defaultValue)\n    let pre = _.get(previous, path, defaultValue)\n  \n    if (_.isFunction(transfrom)) {\n      cur = transfrom(_, cur)\n      pre = transfrom(_, pre)\n    }\n  \n    return {\n      Current: cur,\n      Previous: pre,\n      HasChanged: cur !== pre\n    }\n  }","import React from 'react';\nimport _ from 'lodash'\nimport { componentGetCompareProps } from './Shared'\nimport './LocalTracks.css'\n\nexport class LocalTracks extends React.Component {\n    constructor (props) {\n        super(props)\n\n\n        this.state = {\n            selectedMicDeviceId: 'none',\n            selectedVideoDeviceId: 'none',\n            loaded: false,\n            joinVidCall: false}\n        \n        this.videoRef = React.createRef()\n        this.micRef = React.createRef()\n        this.trackList = []\n        //console.log('LocalTracks::Consructor', props)\n        this.setVidCallFlagFx=props.setVidCallFlag\n    }\n\n    componentDidMount () {\n        const { deviceList = [], defaultMicId, defaultVideoId, activeRoomId } = this.props\n\n        window.JitsiMeetJS.createLocalTracks({ devices: ['audio', 'video']})\n        .then((tracks) => {\n            let deviceIds = _.map(deviceList, (nd) => nd.id)\n            for (let track of tracks) {\n                if (_.indexOf(deviceIds, track.deviceId) !== -1) {\n                    this.trackList.push(track)\n                }\n            }\n            this.setState({\n                loaded: true,\n                deviceList: deviceList,\n                selectedMicDeviceId: defaultMicId,\n                selectedVideoDeviceId: defaultVideoId,\n            }, () => {\n                this.updateLocalTrack(defaultMicId, 'set')\n                this.updateLocalTrack(defaultVideoId, 'set')\n                //console.log(\"LocalTracks:DidMount:  Join vid call\", this.state.joinVidCall)\n\n                if (activeRoomId && window.asmitaMeet.activeRoom && this.state.joinVidCall) {\n                    \n                    let videoTrack = _.find(this.trackList, (t) => { return t.deviceId === defaultVideoId })\n                    let micTrack = _.find(this.trackList, (t) => { return t.deviceId === defaultMicId })\n                    console.log(\"LocalTracks:DidMount Adding tracks to ActiveRoom\", videoTrack, micTrack)\n                    if (videoTrack) {\n                        window.asmitaMeet.activeRoom.addTrack(videoTrack)\n                    }\n                    if (micTrack) {\n                        window.asmitaMeet.activeRoom.addTrack(micTrack)\n                    }\n                }\n            })\n        })\n    }\n\n    onTrackStoppedEvent = (event) => {\n        console.log(`Track Stopped`)\n    }\n\n    onTrackAudioOutputChangedEvent = (deviceId) => {\n        console.log(`Track ${deviceId} audio output changed`)\n    }\n\n    updateLocalTrack = (deviceId, action = 'clear') => {\n        if (action === 'clear') {\n            let clearTrack = _.find(this.trackList, { deviceId: deviceId })\n            if (clearTrack) {\n                // eslint-disable-next-line default-case\n                switch (clearTrack.getType()) {\n                    case 'audio':\n                    if (this.micRef.current) {\n                        clearTrack.detach(this.micRef.current)\n                        clearTrack.removeEventListener(window.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, this.onTrackStoppedEvent);\n                        clearTrack.removeEventListener(window.JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED, this.onTrackAudioOutputChangedEvent);\n                        clearTrack.dispose()\n                    }\n                    break\n                    case 'video':\n                        if (this.videoRef.current) {\n                            clearTrack.detach(this.videoRef.current)\n                            clearTrack.dispose()\n                        }\n                    break\n                }\n            }\n        } else if (action === 'set') {\n            let setTrack = _.find(this.trackList, (t) => { return t.deviceId === deviceId })\n            if (setTrack) {\n            // eslint-disable-next-line default-case\n                switch (setTrack.getType()) {\n                    case 'audio':\n                        if (this.micRef.current) {\n                            setTrack.attach(this.micRef.current)\n                            setTrack.addEventListener(window.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, this.onTrackStoppedEvent);\n                            setTrack.addEventListener(window.JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED, this.onTrackAudioOutputChangedEvent);\n                            setTrack.mute()\n                        }\n                    break\n                    case 'video':\n                        if (setTrack && this.videoRef.current) {\n                            setTrack.attach(this.videoRef.current)\n                        }\n                    break\n                }\n            }\n        }\n    }\n    allowVidCall = () => {\n\n        this.setState({\n          joinVidCall:true\n        });\n        this.setVidCallFlagFx(true);\n        \n        \n        //console.log(\"LocalTracks::allowVidCall - allowVidCall function called \");\n    \n    \n      }\n    \n      disableVidCall = () => {\n        this.setState({\n          joinVidCall:false\n        })\n        this.setVidCallFlagFx(false);\n        \n    \n      }\n    \n\n    componentDidUpdate (prevProps, prevState) {\n\n\n        const selectedVideoDeviceId = componentGetCompareProps('selectedVideoDeviceId', this.state, prevState, '')\n\n        if (selectedVideoDeviceId.HasChanged) {\n            if (selectedVideoDeviceId.Previous !== '') {\n                this.updateLocalTrack(selectedVideoDeviceId.Previous, 'clear')\n            }\n            if (selectedVideoDeviceId.Current !== '') {\n                this.updateLocalTrack(selectedVideoDeviceId.Current, 'set' )\n            }\n        }\n\n        const selectedMicDeviceId = componentGetCompareProps('selectedMicDeviceId', this.state, prevState, '')\n\n        if (selectedMicDeviceId.HasChanged) {\n            if (selectedMicDeviceId.Previous !== '') {\n                this.updateLocalTrack(selectedMicDeviceId.Previous, 'clear')\n            }\n            if (selectedMicDeviceId.Current !== '') {\n                this.updateLocalTrack(selectedMicDeviceId.Current, 'set' )\n            }\n        }\n\n        const activeRoomId = componentGetCompareProps('activeRoomId', this.props, prevProps, '')\n        \n        //if (activeRoomId.HasChanged) {\n            //log(\"LocalTracks:Update:  Join vid call\", this.state.joinVidCall)\n            if (activeRoomId.Current && window.asmitaMeet.activeRoom && this.state.joinVidCall) {\n                const { selectedMicDeviceId, selectedVideoDeviceId } = this.state\n                let videoTrack = _.find(this.trackList, (t) => { return t.deviceId === selectedVideoDeviceId })\n                let micTrack = _.find(this.trackList, (t) => { return t.deviceId === selectedMicDeviceId })\n                if (videoTrack) {\n                    window.asmitaMeet.activeRoom.addTrack(videoTrack)\n                }\n                if (micTrack) {\n                    window.asmitaMeet.activeRoom.addTrack(micTrack)\n                }\n            }\n        \n        //}\n    }\n\n    componentWillUnmount () {\n        const { selectedMicDeviceId, selectedVideoDeviceId } = this.state\n\n        this.updateLocalTrack(selectedMicDeviceId, 'clear')\n        this.updateLocalTrack(selectedVideoDeviceId, 'clear')\n    }\n\n    onCameraChange = (event) => {\n        this.setState({selectedVideoDeviceId: event.target.value});\n    }\n\n    onMicrophoneChange = (event) => {\n        this.setState({selectedMicDeviceId: event.target.value});\n    }\n\n    render () {\n        const { selectedVideoDeviceId, selectedMicDeviceId, deviceList = [] } = this.state\n\n\n        return <div className='local_track'>\n            {/*}<div className='local_track_controls'>\n                <span>Camera</span>\n                <select value={selectedVideoDeviceId} onChange={this.onCameraChange}>\n                    {_.map(_.concat([{ name: 'none', id: 'none', type: 'none' }], _.filter(deviceList, { type: 'videoinput' })), (d) => {\n                        return <option key={d.id} value={d.id}>{d.name}</option>\n                    })}\n                </select>\n                <span>Microphone</span>\n                <select value={selectedMicDeviceId} onChange={this.onMicrophoneChange}>\n                    {_.map(_.filter(deviceList, { type: 'audioinput' }), (d) => {\n                        return <option key={d.id} value={d.id}>{d.name}</option>\n                    })}\n                </select>\n            </div>{*/}\n            <div>\n              { this.state.joinVidCall === false\n                ? <button className=\"tm-btn-subscribe\" onClick={this.allowVidCall}>\n                  Join Vid Call\n                </button>\n                : this.state.joinVidCall === true\n                  ? <button className=\"tm-btn-subscribe\" onClick={this.disableVidCall}>\n                    Leave Vid Call\n                  </button>\n                  : <p></p>\n              }\n            </div>\n            <div className='local_track_body'>\n                <video autoPlay='1' ref={this.videoRef}/>\n            </div>\n            {/* <div>\n                <audio autoPlay='1' muted='true' ref={this.micRef} />\n            </div> */}\n        </div>\n\n    }\n}\n","import React from 'react';\nimport _ from 'lodash'\nimport { componentGetCompareProps } from './Shared'\nimport './RemoteTrack.css'\n\nexport class RemoteTrack extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            selectedVideoId: '',\n            selectedMicId: ''\n        }\n        this.videoRef = React.createRef()\n        this.micRef = React.createRef()\n        this.tracks = []\n        this.name=props.participantName;\n    }\n\n    componentDidMount () {\n        let { trackIds = [], selectedSpeakerDeviceId } = this.props\n        trackIds = trackIds.map((track) => {\n            return track[\"id\"];\n        });\n\n        this.tracks = _.filter(window.asmitaMeet.remoteTracks, (rt) => { return _.indexOf(trackIds, rt.id) !== -1 })\n\n        let videoTrack = _.find(this.tracks, { type: 'video' })\n        let micTrack = _.find(this.tracks, { type: 'audio' })\n\n        if (videoTrack || micTrack) {\n            let newState = {}\n            if (videoTrack) {\n                this.updateTrack(videoTrack, 'set')\n                newState.selectedVideoId = videoTrack.id\n            }\n            if (micTrack) {\n                this.updateTrack(micTrack, 'set')\n                newState.selectedMicId = micTrack.id\n                micTrack.track.setAudioOutput(selectedSpeakerDeviceId)\n            }\n            this.setState(newState)\n        }\n    }\n\n    componentDidUpdate (prevProps) {\n\n        const trackIds = componentGetCompareProps('trackIds', this.props, prevProps, [])\n        const currentTrackIdText = _.map(trackIds.Current, (ct) => { return ct.id }).join(',')\n        const previousTrackIdText = _.map(trackIds.Previous, (pt) => { return pt.id}).join(',')\n\n        if (currentTrackIdText !== previousTrackIdText) {\n            let participantId = _.first(_.map(trackIds.Current, (tid) => tid.participantId))\n            this.tracks = _.filter(window.asmitaMeet.remoteTracks, { participantId: participantId })\n            let videoTrack = _.find(this.tracks, { type: 'video' })\n            let micTrack = _.find(this.tracks, { type: 'audio' })\n            let newState = {}\n            if (videoTrack) {\n                const { selectedVideoId } = this.state\n                if (videoTrack.id !== selectedVideoId) {\n                    let oldVideoTrack = _.find(this.tracks, { id: selectedVideoId })\n                    if (oldVideoTrack) {\n                        this.updateTrack(oldVideoTrack, 'clear')\n                    }\n                    this.updateTrack(videoTrack, 'set')\n                    newState.selectedVideoId = videoTrack.id\n                }\n            }\n            if (micTrack) {\n                const { selectedMicId } = this.state\n                if (micTrack.id !== selectedMicId) {\n                    const { selectedSpeakerDeviceId } = this.props\n                    let oldMicTrack = _.find(this.tracks, { id: selectedMicId })\n                    if (oldMicTrack) {\n                        this.updateTrack(oldMicTrack, 'clear')\n                    }\n                    this.updateTrack(micTrack, 'set')\n                    micTrack.track.setAudioOutput(selectedSpeakerDeviceId)\n                    newState.selectedMicId = micTrack.id\n                }\n            }\n            this.setState(newState)\n        }\n\n        const selectedSpeakerDeviceId = componentGetCompareProps('selectedSpeakerDeviceId', this.props, prevProps, '')\n\n        if (selectedSpeakerDeviceId.HasChanged) {\n            const { selectedMicId } = this.state\n            let micTrack = _.find(this.tracks, { id: selectedMicId })\n            if (micTrack) {\n                micTrack.track.setAudioOutput(selectedSpeakerDeviceId.Current)\n            }\n        }\n\n    }\n\n    componentWillUnmount () {\n        const { selectedVideoId, selectedMicId } = this.state\n        let videoTrack = _.find(this.tracks, { id: selectedVideoId })\n        if (videoTrack) {\n            try {\n                this.updateTrack(videoTrack, 'clear')\n            } catch (error) {\n                console.log(error.message)\n            }\n        }\n        let micTrack = _.find(this.tracks, { id: selectedMicId })\n        if (micTrack) {\n            try {\n                this.updateTrack(micTrack, 'clear')\n            } catch (error) {\n                console.log(error.message)\n            }\n        }\n    }\n\n    onTrackStoppedEvent = (event) => {\n        console.log(`Track Stopped`)\n    }\n\n    onTrackAudioOutputChangedEvent = (deviceId) => {\n        console.log(`Track ${deviceId} audio output changed`)\n    }\n\n    updateTrack = (track, action = 'clear') => {\n        if (action === 'clear') {\n            if (track) {\n                // eslint-disable-next-line default-case\n                switch (track.type) {\n                    case 'audio':\n                    if (this.micRef.current) {\n                        track.track.detach(this.micRef.current)\n                    }\n                    break\n                    case 'video':\n                    if (this.videoRef.current) {\n                        track.track.detach(this.videoRef.current)\n                    }\n                    break\n                }\n            }\n        } else if (action === 'set') {\n            if (track) {\n            // eslint-disable-next-line default-case\n                switch (track.type) {\n                    case 'audio':\n                        if (this.micRef.current) {\n                            track.track.attach(this.micRef.current)\n                        }\n                    break\n                    case 'video':\n                        if (this.videoRef.current) {\n                            track.track.attach(this.videoRef.current)\n                        }\n                    break\n                }\n            }\n        }\n    }\n\n    render () {\n\n        return <div className='remote_track'>\n            <div className='remote_track_controls'>\n                <span>{this.name}</span>\n            </div>\n            <div className='remote_track_body'>\n                <video autoPlay='1' ref={this.videoRef}/>\n            </div>\n            <div>\n                <audio autoPlay='1' ref={this.micRef} />\n            </div>\n        </div>\n\n    }\n}","import React from 'react'\nimport _ from 'lodash'\n\nexport class LocalSpeaker extends React.Component {\n    constructor (props) {\n        super(props)\n\n        this.state = {\n            selectedSpeakerDeviceId: '',\n            speakerList: []\n        }\n    }\n\n    componentDidMount () {\n        const { deviceList = [], defaultSpeakerId, onSpeakerChanged } = this.props\n\n        this.setState({\n            speakerList: _.filter(deviceList, { type: 'audiooutput' }),\n            selectedSpeakerDeviceId: defaultSpeakerId\n        }, () => {\n            if (_.isFunction(onSpeakerChanged)) {\n                let firstSpeaker = _.find(deviceList, { id: defaultSpeakerId })\n                onSpeakerChanged(firstSpeaker)\n            }\n        })\n    }\n\n    onSpeakerChanged = (event) => {\n        const { onSpeakerChanged } = this.props\n        const { speakerList = [] } = this.state\n        let newSpeakerId = event.target.value\n        this.setState({\n            selectedSpeakerDeviceId: newSpeakerId\n        }, () => {\n            if (_.isFunction(onSpeakerChanged)) {\n                onSpeakerChanged(_.find(speakerList, { id: newSpeakerId }) || { id: 'none', name: 'None' })\n            }\n        })\n    }\n\n    render () {\n        const { selectedSpeakerDeviceId, speakerList } = this.state\n        return <React.Fragment>\n            <span>Speaker</span>\n            <select value={selectedSpeakerDeviceId} onChange={this.onSpeakerChanged}>\n                {_.map(speakerList, (s) => <option key={s.id} value={s.id}>{s.name}</option>)}\n            </select>\n        </React.Fragment>\n\n    }\n\n}","import React from 'react';\nimport './MessageItem.css';\n\nexport class MessageItem extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            message: props.message ? props.message : null,\n            timestamp: props.timestamp || Date.now(),\n            sender: props.sender || \"Unknown\",\n        }\n\n\n    }\n    toCurrentDate = (timestamp) => {\n        var formats=['jan','feb','mar','apr','may','jun','july',\n                        'aug','sept','oct','nov','dec']\n        let currTime = new Date(timestamp);\n        let dd = currTime.getDate() ; \n        let mm = currTime.getMonth();\n        let hours = currTime.getHours();\n        let mins = currTime.getMinutes();\n\n        let retString =  dd + \"-\" + formats[mm] + \"\" + \"  \" + hours + \":\" + mins ; \n        return retString ; \n        //return currTime.toString();\n\n    }\n    render() {\n        return (\n            <div className=\"MessageItem\">\n                <div className=\"chatbox1\">\n                <div className=\"chatbox__messages_user-message\">\n                    <div className=\"chatbox__messages__user-message--ind-message\">\n\n                        <p className=\"name\">{this.state.sender}</p>\n                        <p className=\"timeStamp\"> {this.toCurrentDate(this.state.timestamp)}</p>\n                        <p className=\"message\">{this.state.message}</p>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport './MyChatBox.css';\nimport { MessageItem } from './MessageItem';\n\n\nexport class MyChatBox extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.messages = props.messages;\n\n        this.participantName = props.participantName;\n        this.participantNames = props.participantNames;\n\n\n\n        this.state = {\n            listofMessages: this.props.messages,\n            currentMessage: '',\n            participantName:this.props.participantName,\n            participantNames:this.props.participantNames\n        }\n\n    }\n\n    componentDidMount() {\n        //console.log(\"MyChatBox: DidMount():\");\n    }\n\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.messages !== this.props.messages) {\n            this.setState({ listofMessages: this.props.messages});\n        }\n        if (prevProps.participantName !== this.props.participantName) {\n            this.setState({ participantName:this.props.participantName });\n        }\n        if (prevProps.participantNames !== this.props.participantNames) {\n            this.setState({\n                participantNames:this.props.participantNames });\n        }\n    }\n\n    onSend = () => {\n\n        console.log(\"MyChatBox:  onSend()\");\n\n        if (this.state.currentMessage === \"\") {\n            console.log(\"ChatBox::onSend()  - no point in sending an empty message : STOP IT\");\n        } else {\n            console.log(\"ChatBox::OnSend()  - Sending a text message to the world\", this.state.currentMessage);\n\n            let tempText = this.state.currentMessage;\n            let tempName = this.participantName;\n            let tempTimestamp = Date.now();\n            console.log('Timestamp:', tempTimestamp);\n            /*\n            this.messages=this.state.listofMessages;\n            this.messages.push({\n                name: tempName,\n                message: tempText,\n                timestamp: tempTimestamp,\n                type: tempType,\n            });\n            this.setState({listofMessages:this.messages});\n            */\n            console.log('Seeing active room', window.asmitaMeet.activeRoom);\n            if (window.asmitaMeet.activeRoom) {\n                let tempString = JSON.stringify({\n                    name: tempName,\n                    message: tempText,\n                    timestamp: tempTimestamp\n                })\n                window.asmitaMeet.activeRoom.sendTextMessage(tempString);\n                console.log('Sending JSOn stringify to room', tempString);\n            }\n        }\n\n\n    }\n    displaylistofMessages = () => {\n        let ret = []\n        let n = this.state.listofMessages.length;\n        if (n < 5) {\n\n            this.state.listofMessages.map((m) => (\n\n                ret.push(<MessageItem key={m.timestamp + m.message} message={m.message} sender={m.name} timestamp={m.timestamp}> </MessageItem>)))\n        }\n        else {\n            for(let i=n-5;i<n;i++){\n                let m=this.state.listofMessages[i];\n                ret.push(<MessageItem key={m.timestamp + m.message} message={m.message} sender={m.name} timestamp={m.timestamp}> </MessageItem>)\n\n            }\n\n                \n        }\n\n\n\n        return ret;\n\n\n\n    }\n\n    render() {\n\n        const boxStyle = {\n            color: \"#346789\",\n            background: \"linear-gradient(120deg, rgba(23, 190, 187, 1), rgba(240, 166, 202, 1))\",\n            overflow: \"hidden\"\n        }\n        return (\n            <div className=\"MyChatBox\" key={this.props}>\n            \n                <div className=\"chatbox\" >\n                    <div className=\"chatbox__user-list\">\n                        <h1>Chat Participants</h1>\n                        {this.state.participantNames.map(\n                            participant =>\n                                <div className='chatbox__user--active' key={participant.id}>\n                                    <p>{participant.name}</p> </div>\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"Chat\"  >\n                    <div className=\"chatbox__messages\">\n                        {/*}<h3>Message List</h3>{*/}\n                        {\n                            this.displaylistofMessages()}\n                        {/*}\n                            this.state.listofMessages.map((m) => (\n\n                            <MessageItem key={m.timestamp+m.message} message={m.message} sender={m.name} timestamp={m.timestamp}> </MessageItem>\n                            \n                        )){*/}\n\n\n                    </div>\n                </div>\n\n                <div className=\"Sendbox\">\n                    <div className=\"InputText\">\n                        {/*}<span>Message to Send: </span>{*/}\n                        <input type='text' placeholder=\"Enter a message\" value={this.state.currentMessage}\n                            onChange={(event) => { this.setState({ currentMessage: event.target.value }) }}>\n                        </input>\n                        <button className=\"sendButton\" onClick={this.onSend}>\n                        <i class=\"far fa-paper-plane\" ></i>\n                        </button>\n                    </div>\n                </div>\n\n\n\n\n                {/*}  <div style={mystyle}>\n                    <div>\n                        <h3> Chat Box State</h3>\n                        <pre>\n                            {JSON.stringify(this.state, null, 2)}\n                        </pre>\n                    </div>\n\n                </div>\n                {*/}\n\n\n\n\n\n\n\n\n\n\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/templatemo-style.css'\nimport './fonts/font-awesome.min.css'\nimport './css/demo.css' \n\n\nimport { LocalTracks } from './LocalTracks'\nimport { LocalSpeaker } from './LocalSpeaker'\nimport _ from 'lodash'\nimport { RemoteTrack } from './RemoteTrack';\nimport { v4 as uuidv4 } from 'uuid'\nimport { MyChatBox } from './MyChatBox'\n\nimport Button from 'react-bootstrap/Button';\n\n\nlet displaystring = \"Asmita\";\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      joinVidCall: false,\n      serverURL: 'alpha.jitsi.net',\n      roomId: 'e1202',\n      participantName: 'amyat',\n      selectedSpeakerDeviceId: '',\n      defaultMicId: '',\n      defaultVideoId: '',\n      defaultSpeakerId: '',\n      deviceList: [],\n      status: 'closed',\n      lastError: '',\n      remoteTrackIds: [],\n      loaded: false,\n      activeRoomId: null,\n      messages: [],\n      participantList: [],\n      strSanitizeFx: this.strSanitize,\n    }\n    this.messages = [];\n    this.participantList = [];\n    this.myfx = this.setVidCallFlagFx;\n\n\n    window.asmitaMeet = {}\n    window.asmitaMeet.remoteTracks = []\n    window.asmitaMeet.activeConnection = null\n    window.asmitaMeet.activeRoom = null\n  }\n\n  onMessageRecvdOfApp = (id, msg, ns) => {\n    console.log(\"App():onMessageRecvd:  \", id, msg, ns);\n    let tempjason = JSON.parse(msg)\n\n    this.messages.push(tempjason)\n    this.setState({ messages: this.messages });\n\n\n  }\n  /*\n  onMessageGot = (id, msg, num) => {\n    console.log('LoginPage::onMessageGot()  WE GOT MESSAGE FROM ALIENS', 'ID:', id, 'MSG:', msg, 'NUM:', num);\n    this.onMessageRecvd(id,msg,num);\n    console.log(\"LoginPage:onMessageGot(): passing the funciton to upper layer\");\n    this.messageRecvd = { id:id, msg:msg, num:num}\n}*/\n  setVidCallFlagFx = (flag) => {\n    this.setState({\n      joinVidCall: flag,\n    })\n    //console.log('App::setVidCallFlag - flag ', flag)\n  }\n\n\n  componentDidMount() {\n    window.JitsiMeetJS.mediaDevices.enumerateDevices((devices) => {\n      let newDeviceList = []\n      for (let device of devices) {\n        // if (device.deviceId !== 'default' && device.deviceId !== 'communications') {\n        newDeviceList.push({ name: device.label, id: device.deviceId, type: device.kind })\n        // }\n      }\n      let micId = (_.find(newDeviceList, { type: 'audioinput' }) || {}).id || 'none'\n      let videoId = (_.find(newDeviceList, { type: 'videoinput' }) || {}).id || 'none'\n      let speakerId = (_.find(newDeviceList, { type: 'audiooutput' }) || {}).id || 'none'\n      this.setState({\n        deviceList: newDeviceList,\n        defaultMicId: micId,\n        defaultVideoId: videoId,\n        defaultSpeakerId: speakerId,\n        messages: this.messages,\n        loaded: true\n      })\n\n    })\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  onSpeakerChanged = (newSpeaker) => {\n    this.setState({\n      selectedSpeakerDeviceId: newSpeaker.id\n    })\n  }\n\n  onServerChanged = (event) => {\n    this.setState({\n      serverURL: event.target.value\n    })\n  }\n\n  onRoomChanged = (event) => {\n    this.setState({\n      roomId: event.target.value\n    })\n  }\n\n  onRoomTrackAdded = (track) => {\n    if (track.isLocal() === true) {\n      return\n    }\n    let newTrackId = track.getId()\n    console.log(`Track Added: ${newTrackId}`)\n    let matchTrack = _.find(this.remoteTracks, { id: newTrackId })\n    if (matchTrack) {\n      return\n    }\n    let trackInfo = {\n      id: newTrackId,\n      participantId: track.getParticipantId(),\n      type: track.getType(),\n      track: track\n    }\n    window.asmitaMeet.remoteTracks.push(trackInfo)\n    this.setState({\n      remoteTrackIds: _.map(window.asmitaMeet.remoteTracks, (rt) => { return { id: rt.id, participantId: rt.participantId } })\n    })\n  }\n\n  onRoomTrackRemoved = (track) => {\n    if (track.isLocal() === true) {\n      return\n    }\n    let trackId = track.getId()\n    window.asmitaMeet.remoteTracks = _.reject(window.asmitaMeet.remoteTracks, { id: trackId })\n    this.setState({\n      remoteTrackIds: _.map(window.asmitaMeet.remoteTracks, (rt) => { return { id: rt.id, participantId: rt.participantId } })\n    })\n\n  }\n\n  onConnectionSuccess = () => {\n    const { roomId } = this.state\n    try {\n      window.asmitaMeet.activeRoom = window.asmitaMeet.activeConnection.initJitsiConference(roomId, {\n        openBridgeChannel: true\n      })\n      window.asmitaMeet.activeRoom.addEventListener(window.JitsiMeetJS.events.conference.TRACK_ADDED, this.onRoomTrackAdded)\n      window.asmitaMeet.activeRoom.addEventListener(window.JitsiMeetJS.events.conference.TRACK_REMOVED, this.onRoomTrackRemoved)\n      window.asmitaMeet.activeRoom.addEventListener(window.JitsiMeetJS.events.conference.MESSAGE_RECEIVED, this.onMessageRecvdOfApp)\n      /* window.asmitaMeet.activeRoom.on(\n          JitsiMeetJS.events.conference.CONFERENCE_JOINED,\n           onConferenceJoined);\n          this.activeRoom.on(JitsiMeetJS.events.conference.USER_JOINED, id => {\n          console.log('user join');\n         remoteTracks[id] = [];\n       }); */\n      // this.activeRoom.on(JitsiMeetJS.events.conference.USER_LEFT, onUserLeft);\n      // this.activeRoom.on(JitsiMeetJS.events.conference.TRACK_MUTE_CHANGED, track => {\n      //     console.log(`${track.getType()} - ${track.isMuted()}`);\n      // });\n      // this.activeRoom.on(\n      //     JitsiMeetJS.events.conference.DISPLAY_NAME_CHANGED,\n      //     (userID, displayName) => console.log(`${userID} - ${displayName}`));\n      //     this.activeRoom.on(\n      //     JitsiMeetJS.events.conference.TRACK_AUDIO_LEVEL_CHANGED,\n      //     (userID, audioLevel) => console.log(`${userID} - ${audioLevel}`));\n      //     this.activeRoom.on(\n      //     JitsiMeetJS.events.conference.PHONE_NUMBER_CHANGED,\n      //     () => console.log(`${room.getPhoneNumber()} - ${room.getPhonePin()}`));\n\n      window.asmitaMeet.activeRoom.addEventListener(window.JitsiMeetJS.events.conference.USER_JOINED, this.onUserJoined);\n      window.asmitaMeet.activeRoom.addEventListener(window.JitsiMeetJS.events.conference.USER_LEFT, this.onUserLeft);\n\n      window.asmitaMeet.activeRoom.join()\n\n      window.asmitaMeet.activeRoom.setDisplayName(this.state.participantName);\n\n      window.asmitaMeet.activeRoom.setLocalParticipantProperty(\"naak\", \"mottha\");\n      window.asmitaMeet.activeRoom.setLocalParticipantProperty(\"tond\", \"vedavakra\");\n\n      window.asmitaMeet.activeRoom.setSubject(\"BlahButti\");\n      let tempMyUserId = window.asmitaMeet.activeRoom.myUserId();\n      let tempList = window.asmitaMeet.activeRoom.getParticipants();\n\n      let myName = this.state.participantName;\n      this.participantList = [{ id: tempMyUserId, name: myName }];\n\n      console.log(\"APP:ONCONNSUCC USER ID\", tempMyUserId)\n      console.log(\"APP:ONCONNSUCC USERs ID LIST\", tempList)\n      console.log(\"APP::ONCONSUCC:participantList\", this.participantList)\n\n      this.setState({\n        status: 'open',\n        lastError: '',\n        activeRoomId: uuidv4(),\n        participantList: this.participantList,\n      })\n    } catch (error) {\n      this.setState({\n        status: 'closed',\n        lastError: error.message\n      })\n    }\n  }\n  onUserJoined = (id, user) => {\n    let tempdisplayName = window.asmitaMeet.activeRoom.getParticipantById(id)._displayName;\n    let tempID = id;\n    console.log(\"APP:ONUSERJOINED: This guy joined lol\", tempID, user, tempdisplayName);\n    this.participantList = this.state.participantList;\n    this.participantList.push({ id: tempID, name: tempdisplayName });\n    this.setState({\n      participantList: this.participantList\n    });\n  }\n  onUserLeft = (id, user) => {\n    let preList = this.state.participantList;\n    let tempdisplayName = preList.find(p => p.id == id).name;\n    let tempID = id;\n    console.log(\"APP:ONUSERLEFT: This guy left lol\", tempID, user, tempdisplayName);\n    this.participantList = this.state.participantList;\n    this.participantList = this.participantList.filter((p) => p.id != id);\n    console.log(\"APP:ONUSERLEFT: List AFter Leaving\", this.participantList);\n    this.setState({\n      participantList: this.participantList\n    });\n  }\n\n  onConnectionFailed = (a, b, c, d) => {\n    this.setState({\n      status: 'closed',\n      lastError: a,\n      activeRoomId: null\n    })\n  }\n\n  onConnectionDisconnect = () => {\n    window.asmitaMeet.activeConnection.removeEventListener(window.JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, this.onConnectionSuccess)\n    window.asmitaMeet.activeConnection.removeEventListener(window.JitsiMeetJS.events.connection.CONNECTION_FAILED, this.onConnectionFailed)\n    window.asmitaMeet.activeConnection.removeEventListener(window.JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED, this.onConnectionDisconnect)\n    window.asmitaMeet.activeRoom.removeEventListener(window.JitsiMeetJS.events.conference.TRACK_ADDED, this.onRoomTrackAdded)\n    window.asmitaMeet.activeRoom.removeEventListener(window.JitsiMeetJS.events.conference.TRACK_REMOVED, this.onRoomTrackRemoved)\n\n  }\n\n  onConnect = () => {\n    const { roomId, serverURL } = this.state\n    this.setState({\n      status: 'Joining...'\n    })\n    window.asmitaMeet.activeConnection = new window.JitsiMeetJS.JitsiConnection(null, null, {\n      hosts: {\n        domain: serverURL,\n        muc: `conference.${serverURL}` // FIXME: use XEP-0030\n      },\n      serviceUrl: `wss://${serverURL}/xmpp-websocket?room=${roomId}`,\n      clientNode: `https://${serverURL}`\n    })\n\n    window.asmitaMeet.activeConnection.addEventListener(window.JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, this.onConnectionSuccess)\n    window.asmitaMeet.activeConnection.addEventListener(window.JitsiMeetJS.events.connection.CONNECTION_FAILED, this.onConnectionFailed)\n    window.asmitaMeet.activeConnection.addEventListener(window.JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED, this.onConnectionDisconnect)\n    window.asmitaMeet.activeConnection.connect()\n  }\n\n  onDisconnect = () => {\n    if (window.asmitaMeet.activeRoom) {\n      this.setState({\n        status: 'Leaving...'\n      })\n      try {\n        window.asmitaMeet.activeRoom.leave().then(() => {\n          if (window.asmitaMeet.activeConnection) {\n            window.asmitaMeet.activeConnection.disconnect()\n          }\n          this.messages=[]\n          this.setState({\n            status: 'closed',\n            remoteTracks: [],\n            activeRoomId: null,\n            messages:[],\n          })\n        })\n      } catch (error) {\n        this.setState({\n          status: 'closed',\n          lastError: error.message\n        })\n      }\n    }\n  }\n  allowVidCall = () => {\n\n    this.setState({\n      joinVidCall: true\n    })\n\n\n  }\n\n  disableVidCall = () => {\n    this.setState({\n      joinVidCall: false\n    })\n\n  }\n  strSanitize = (passedStr) => {\n    console.log(\"Input string:\", passedStr);\n\n     //var demoString = \"(123)-//[45Awr%6]-5675@4F%&k\";\n\n    var regex = /\\W/g;\n    var replacedString = passedStr.replace(regex, \"_\").toLowerCase();\n    console.log(\"Output String:\", replacedString);\n    return replacedString ;\n}\n\n  renderRemoteTracks = (trackGroups = {}, selectedSpeakerDeviceId) => {\n    if (this.state.status === 'closed' || this.state.joinVidCall === false) return <p></p>;\n    let ret = []\n\n\n    let participantIds = _.keys(trackGroups)\n    console.log('APP::RENDEREMOTETRACKS::PARTICIPANTIDS', participantIds)\n\n    if (participantIds.length === 0) {\n      return null\n    }\n    for (let participantId of participantIds) {\n      let tempParticipantName = this.state.participantList.find(p => p.id == participantId).name;\n      console.log('APP::RENDEREMOTETRACKS::PARTICIPANNAMES', tempParticipantName)\n      ret.push(<div key={participantId} className=\"B_Body_Block\">\n        <RemoteTrack trackIds={trackGroups[participantId]} selectedSpeakerDeviceId={selectedSpeakerDeviceId} participantName={tempParticipantName} />\n      </div>)\n    }\n\n\n    return ret\n  }\n  \n  render() {\n    const { selectedSpeakerDeviceId, serverURL, roomId, status, lastError, defaultMicId, defaultVideoId, defaultSpeakerId, deviceList, loaded = false, remoteTrackIds = [], activeRoomId, setVidCallFlag } = this.state\n\n    if (loaded === false) {\n      return (\n        <div className='App'>\n          <div className='AppLoading'>\n            <h3>Loading...</h3>\n          </div>\n        </div>\n      )\n    }\n\n    let remoteTrackGroups = _.groupBy(remoteTrackIds, (rt) => {\n      return rt.participantId\n    })\n\n\n    return (\n      <div className=\"App2\">\n\n\n\n        {this.state.status === 'closed' ?\n          <div className=\"App1\">\n\n            <div id=\"particles-js\"></div>\n          {/*}\n            <ul className=\"cb-slideshow\">\n              <li>lim</li>\n              <li>prasanna</li>\n              <li>hari</li>\n              <li>wedbamboo</li>\n              <li>dokya war ushi</li>\n              <li>Main</li>\n            </ul>\n            {*/}\n\n            <div className=\"container-fluid\">\n              <div className=\"row cb-slideshow-text-container \">\n                <div className=\"tm-content col-xl-6 col-sm-8 col-xs-8 ml-auto section\">\n\n\n                  <header className=\"mb-5 bigfonts\">\n                    <h1> Welcome to asmitameet! </h1>\n                  </header>\n\n\n\n\n                  <p className=\"mb-5\"></p>\n                  <p></p>\n\n\n                  <form   className=\"subscribe-form\" onSubmit={this.onConnect}>\n                    <div className=\"row form-section\">\n\n                    <div className=\"col-md-7 col-sm-7 col-xs-7\">\n                        <input name=\"Your Name\" onChange={(event) => { this.setState({ participantName: event.target.value }) }} type=\"text\" className=\"form-control\" id=\"nameid\" placeholder=\"Your name....\" required />\n                      </div>\n\n                      <div className=\"col-md-7 col-sm-7 col-xs-7\">\n                        <input name=\"roomName\" onChange={(event) => { this.setState({ roomId: this.state.strSanitizeFx(event.target.value) }) }} type=\"text\" className=\"form-control\" id=\"roomnameid\" placeholder=\"Room Name...\" required />\n                      </div>\n\n                      \n\n\n                      <div className=\"col-md-5 col-sm-5 col-xs-5\">\n                        <button type=\"submit\" className=\"tm-btn-subscribe\">Enter Room</button>\n                      </div>\n\n                    </div>\n                  </form>\n                  <div>{lastError}</div>\n\n\n                  {/*}\n\n                  <form action=\"#\" method=\"get\" className=\"subscribe-form\">\n                    <div className=\"row form-section\">\n\n                      <div className=\"col-md-7 col-sm-7 col-xs-7\">\n                        <input name=\"roomName\" type=\"text\" className=\"form-control\" id=\"roomnameid\" placeholder=\"Room Name...\" required />\n                      </div>\n\n                      <div className=\"col-md-7 col-sm-7 col-xs-7\">\n                        <input name=\"Your Name\" type=\"text\" className=\"form-control\" id=\"nameid\" placeholder=\"Your name....\" required />\n                      </div>\n\n\n                      <div className=\"col-md-5 col-sm-5 col-xs-5\">\n                        <button type=\"submit\" className=\"tm-btn-subscribe\">Enter Room</button>\n                      </div>\n\n                    </div>\n                  </form>\n\n                  {*/}\n\n\n\n\n\n\n                </div>\n              </div>\n            </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                  \n\n            <div className=\"TL\">\n                  {/*}\n              <div>\n                <span>Participant Name</span>\n                <input type='text' value={this.state.participantName} onChange={(event) => { this.setState({ participantName: event.target.value }) }}>\n                </input>\n              </div>\n\n              <div>Room: <input readOnly={status !== 'closed'} type='text' onChange={(event) => { this.setState({ roomId: event.target.value }) }} value={roomId} /></div>\n              <div>\n                {status === 'closed'\n                  ? <button onClick={this.onConnect}>\n                    Connect\n                  </button>\n                  : status === 'open' && this.state.joinVidCall === false\n                    ? <button onClick={this.onDisconnect}>\n                      Disconnect\n                    </button>\n                    : status === 'open' && this.state.joinVidCall === true ?\n                      <p>Please leave vid call to disconnect</p> : <button disable={true}>{status}</button>\n                }\n              </div>\n              <div>{lastError}</div>\n                {*/}\n            </div>\n          </div>\n\n\n\n\n          :\n\n\n\n          <div className=\"App\">\n\n\n\n\n            <div className=\"TL\">\n\n\n            {/*}\n              <div>\n                <span>Participant Name</span>\n                <input type='text' value={this.state.participantName} onChange={(event) => { this.setState({ participantName: event.target.value }) }}>\n                </input>\n              </div>\n\n              <div>Room: <input readOnly={status !== 'closed'} type='text' onChange={(event) => { this.setState({ roomId: event.target.value }) }} value={roomId} /></div>\n            \n            \n                      <div className=\"col-md-5 col-sm-5 col-xs-5\">\n                        <button type=\"submit\" className=\"tm-btn-subscribe\">Enter Room</button>\n                      </div>\n\nclassName=\"mb-5 bigfonts\"\n            \n            \n            {*/}\n\n            <header className=\"mb-5 bigfonts\"><h1>Room:   {this.state.roomId}</h1></header>\n              <div className= \"AsmitaCentreButton\">\n                {status === 'closed'\n                  ? <button className=\"tm-btn-subscribe\" onClick={this.onConnect}>\n                    Connect\n                  </button>\n                  : status === 'open' && this.state.joinVidCall === false\n                    ? <button className=\"tm-btn-subscribe\" onClick={this.onDisconnect}>\n                      Disconnect\n                    </button>\n                    : status === 'open' && this.state.joinVidCall === true ?\n                      <p>Please leave vid call to disconnect</p> : <button className=\"tm-btn-subscribe\" disable={true}>{status}</button>\n                }\n              </div>\n              <div>{lastError}</div>\n              {status === 'open' ?\n                <MyChatBox messages={this.state.messages} participantName={this.state.participantName} participantNames={this.state.participantList} /> : <p> Connect first for message </p>\n              }\n            </div>\n\n\n\n\n\n\n            <div className=\"TR\">\n              <div className=\"TR_Header\">\n                <header className=\"mb-5 bigfonts\"><h1>{this.state.participantName + \"(You!)\"}</h1></header>\n\n                {/*}\n            <LocalSpeaker deviceList={deviceList} key='LocalSpeaker' defaultSpeakerId={defaultSpeakerId} onSpeakerChanged={this.onSpeakerChanged} />\n            {*/}\n              </div>\n              <div className='TR_Body'>\n                <div className=\"TR_Body_Block\">\n                  <LocalTracks setVidCallFlag={this.myfx} activeRoomId={activeRoomId} deviceList={deviceList} defaultMicId={defaultMicId} defaultVideoId={defaultVideoId} key='localTracks' />\n\n                </div>\n\n              </div>\n            </div>\n\n\n\n\n\n\n            <div className=\"B\">\n\n              <div className=\"B_Header\">\n                <header className=\"mb-5 bigfonts\"><h1>Video Call Participants</h1></header>\n              </div>\n              <div className=\"B_Body\">\n                {this.renderRemoteTracks(remoteTrackGroups, selectedSpeakerDeviceId)}\n\n              </div>\n\n\n            </div>\n\n\n          </div>}\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css' ;\n\nimport './index.css';\nimport { App } from './App';\n\nwindow.JitsiMeetJS.init()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}